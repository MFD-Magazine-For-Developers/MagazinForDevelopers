Swift에는 코드를 더 쉽게 읽고 쓸 수 있는 기능이 포함되어 있으며
개발자에게 진정한 시스템 프로그래밍 언어에 필요한 제어 기능을 제공합니다. 
Swift는 유추된 유형을 지원하여 코드를 더 명확하고 실수하기 쉽지 않으며 
모듈은 헤더를 제거하고 네임스페이스를 제공합니다. 
메모리는 자동으로 관리되며 세미콜론을 입력할 필요도 없습니다. 
Swift는 또한 다른 언어에서 차용합니다. 
예를 들어 Objective-C에서 가져온 명명된 매개변수는 Swift의 API를 읽고 
유지하기 쉽게 만드는 깨끗한 구문으로 표현됩니다.

Swift의 기능은 강력하면서도 재미있는 언어를 만들기 위해 함께 작동하도록 설계되었습니다. 
Swift의 몇 가지 추가 기능은 다음과 같습니다.

- 함수 포인터로 통합된 클로저
- 튜플 및 여러 반환 값
- 제네릭
- 범위 또는 컬렉션에 대한 빠르고 간결한 반복
- 메서드, 확장 및 프로토콜을 지원하는 구조체
- 함수형 프로그래밍 패턴(예: 맵 및 필터)
- 강력한 오류 처리 내장
- `do`, `guard`, `defer`및 `repeat`키워드 를 사용한 고급 제어 흐름

** 안전

Swift는 처음부터 C 기반 언어보다 더 안전하도록 설계되었으며 
안전하지 않은 코드의 전체 클래스를 제거합니다. 
변수는 항상 사용 전에 초기화되고, 배열과 정수는 오버플로가 있는지 확인하고, 
메모리는 자동으로 관리됩니다. 구문은 의도를 쉽게 정의할 수 있도록 조정됩니다. 
예를 들어, 간단한 3자 키워드는 변수( `var`) 또는 상수( `let`)를 정의합니다.

또 다른 안전 기능은 기본적으로 Swift 객체는 절대 될 수 없으며 
객체를 만들거나 사용하려고 하면 컴파일 타임 오류가 발생한다는 것입니다. 
이렇게 하면 코드 작성이 훨씬 깨끗하고 안전해지며 
런타임 충돌의 일반적인 원인을 방지할 수 있습니다. 
그러나 적절한 경우가 있으며 이러한 상황에 대해 Swift에는 **optional** 이라는 혁신적인 기능이 있습니다 .
선택 사항에는 가 포함될 수 있지만 Swift 구문은 
컴파일러에게 동작을 이해하고 안전하게 처리할 것임을 나타내기 위해 
사용하여 안전하게 처리하도록 합니다.